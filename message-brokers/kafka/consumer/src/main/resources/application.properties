#spring.application.name=consumer

#kafka.topic.name=demo-topic

#spring.datasource.url=jdbc:postgresql://localhost:5432/consumerdb
#spring.datasource.username=macbook
#spring.datasource.password=guest
#spring.jpa.hibernate.ddl-auto=update
#spring.jpa.show-sql=true

# Kafka Bootstrap
#spring.kafka.consumer.bootstrap-servers=localhost:9092

# Consumer Group
#spring.kafka.consumer.group-id=kafka-latency-group

# Reset from beginning if no offset
#spring.kafka.consumer.auto-offset-reset=earliest

# Use String for Key, JSON for Value
#spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

# Let Spring know which class to deserialize to
#spring.kafka.consumer.properties.spring.json.value.default.type=com.example.kafka.consumer.models.MessagePayload

# Optional: trust all packages if you're unsure
#spring.kafka.consumer.properties.spring.json.trusted.packages=*
#trusted.packages=*

spring.application.name=consumer
server.port=8084

kafka.topic.name=demo-topic-2


spring.datasource.url=jdbc:postgresql://postgres:5432/consumerdb
spring.datasource.username=macbook
spring.datasource.password=guest
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

spring.kafka.consumer.bootstrap-servers=kafka:29092
spring.kafka.consumer.group-id=kafka-latency-group
spring.kafka.consumer.auto-offset-reset=earliest

spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.properties.spring.json.value.default.type=com.example.kafka.consumer.models.MessagePayload
spring.kafka.consumer.properties.spring.json.trusted.packages=*
